@using doan.Utilities;
@model IList<Menu>


<div class="navbar navbar-expand-lg bg-light navbar-light">
    <div class="container-fluid">
        <a href="Home" class="navbar-brand">Burger <span>King</span></a>
        <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#navbarCollapse">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse justify-content-between" id="navbarCollapse">
            <div class="navbar-nav ml-auto">
                @foreach (var menu in Model.Where(m => m.Levels == 1))
                {
                    string active = "";
                    var menuId = menu.MenuId;
                    var menuChild = Model.Where(m => m.ParentId == menuId);
                    if (menu.MenuName == ViewBag.Active)
                    {
                        active = "active";
                    }
                    if (menuChild.Count() == 0)
                    {
                        <a href="/@menu.Link" class="nav-item nav-link @active">
                            @menu.MenuName
                        </a>

                        @if (menu.MenuName == "Booking")
                        {
                            <span class="quantity" id="count"></span>
                        }
                    }
                    else
                    {
                        <div class="nav-item dropdown">
                            <a href="/@menu.Alias" class="nav-link dropdown-toggle" data-toggle="dropdown">
                                @menu.MenuName
                            </a>
                            <div class="dropdown-menu">
                                @foreach (var itemchild in menuChild)
                                {
                                    if (!string.IsNullOrEmpty(itemchild.Link))
                                    {
                                        <a href="@itemchild.Link" class="dropdown-item">@itemchild.MenuName</a>
                                    }
                                    else
                                    {
                                        <a href="/@itemchild.Alias" class="dropdown-item">@itemchild.MenuName</a>
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>
<style>
    .quantity {
        display: inline-block;
        padding: 4px 8px;
        background-color: red;
        color: white;
        border-radius: 33px;
        width: 30px;
        height: 30px;
        text-align: center;
        line-height: 20px;
    }
</style>

<script>
    function getCookieValue(cookieName) {
        var name = cookieName + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var cookiePairs = decodedCookie.split(";");

        for (var i = 0; i < cookiePairs.length; i++) {
            var cookiePair = cookiePairs[i].trim();
            if (cookiePair.indexOf(name) === 0) {
                return cookiePair.substring(name.length, cookiePair.length);
            }
        }

        return null;
    }

    function calculateSum() {
        var json = getCookieValue("cartItems");
        console.log(json);

        if (json) {
            var jsonArray = JSON.parse(json);

            var sum = 0;

            for (var i = 0; i < jsonArray.length; i++) {
                var item = jsonArray[i];
                sum += item.quantity;
            }

            console.log(sum);

            var elementId = "count";
            var element = document.getElementById(elementId);
            if (element) {
                element.textContent = sum.toString();
            }
        }
    }
    calculateSum();

    setInterval(function () {
        var currentJson = getCookieValue("cartItems");
        if (currentJson !== json) {
            json = currentJson;
            calculateSum();
        }
    }, 1000);
</script>