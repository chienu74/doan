@model doan.Areas.Admin.Models.SummerNote

@if (Model.LoadLibrary)
{
    <script src="/admin/lib/snote/jquery.min.js"></script>
    <script src="/admin/lib/snote/bootstrap.bundle.min.js"></script>
    <script src="/admin/lib/snote/summernote-bs4.js"></script>
    <script src="/admin/lib/jqueryui/jquery-ui.js"></script>
    <script src="/admin/lib/elFinder/js/elfinder.min.js"></script>
    

    //<link rel="stylesheet" href="~/admin/lib/bootstrap.css" />
    
    <link rel="stylesheet" href="~/admin/lib/snote/summernote-bs4.css" />
    
    <link rel="stylesheet" href="~/admin/lib/jqueryui/themes/themes/base/theme.css" />
    <link rel="stylesheet" href="~/admin/lib/jqueryui/themes/themes/base/jquery-ui.css" />

    <link rel="stylesheet" href="~/admin/lib/elFinder/css/elfinder.full.css" />
    <link rel="stylesheet" href="~/admin/lib/elFinder/css/theme.css" />
}

<script>
    (function (factory) {
        if (typeof define === 'function' && define.amd) {
            define(['jquery'], factory);
        }
        else if (typeof module === 'object' && module.exports) {
            module.exports = factory(require('jquery'));
        } else {
            factory(window.jQuery);
        }
    }(function ($) {
        $.extend($.summernote.plugins, {
            // Tạo plugin tên elfinder
            'elfinder': function (context) {
                var self = this;
                // ui has renders to build ui elements.
                var ui = $.summernote.ui;
                // Tạo nút bấm
                context.memo('button.elfinder', function () {
                    var button = ui.button({
                        contents: '<i class="note-icon-picture"/>&nbsp;&nbsp;Images',
                        tooltip: 'Quản lý ảnh',
                        click: function () {
                            // Bấm vào nút bấm gọi hàm elfinderDialog
                            elfinderDialog(context);
                        }
                    });
                    // create jQuery object from button instance.
                    var $elfinder = button.render();
                    return $elfinder;
                });
                // This methods will be called when editor is destroyed by $('..').summernote('destroy');
                // You should remove elements on `initialize`.
                this.destroy = function () {
                    this.$panel.remove();
                    this.$panel = null;
                };
            }

        });
    }));

    function elfinderDialog(editor) {
        var fm = $('<div/>').dialogelfinder({
            baseUrl: "@Url.Content("~/admin/lib/elFinder/")",
            url: '/Admin/el-finder-file-system/connector',
            lang: 'vi',
            width: 840,
            height: 450,
            destroyOnClose: true,
            getFileCallback: function (files, fm) {
                console.log(files);
                editor.invoke('editor.insertImage', files.url);
            },
            commandsOptions: {
                getfile: {
                    oncomplete: 'close',
                    folders: false
                }
            },
            uiOptions: {
                //toolbar configuration
                toolbar: [
                    ['home', 'back', 'forward', 'up', 'reload'],
                    ['mkdir', 'mkfile', 'upload'],
                    ['open', 'download', 'getfile'],
                    ['undo', 'redo'],
                    ['copy', 'cut', 'paste', 'delete'],
                    ['duplicate', 'rename', 'edit', 'resize', 'chmod'],
                    ['selectall', 'selectnone', 'selectinvert'],
                    ['quicklook', 'info'],
                    ['extract', 'archive'],
                    ['search'],
                    ['view', 'sort'],
                    ['fullscreen']
                ]
            },
            contextmenu: {
                //navbarfolder menu
                navbar: ['open', '|', 'copy', 'cut', 'paste', 'duplicate', '|', 'rm', '|', 'info'],

                // current directory menu
                cwd: ['reload', 'back', '|', 'upload', 'mkdir', 'mkfile', 'paste', '|', 'info'],

                //current directory file menu
                files: [
                    'getfile', '|', 'open', 'quicklook', '|', 'download', '|', 'copy', 'cut', 'paste', 'duplicate', '|',
                    'rm', '|', 'edit', 'rename', 'resize', '|', 'archive', 'extract', '|', 'info'
                ]
            },
            height: '80%',
            onlyMimes: ["image"],
        }).dialogelfinder('instance');
    }

  
    $(document).ready(function () {
        $('@Model.IDEditor').summernote({
            height: @Model.Height,
            toolbar: @Html.Raw(Model.toolBar)
            });
    });
</script>